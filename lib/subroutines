#!/usr/bin/env bash

RED="\\033[0;31m"
GREEN="\\033[0;32m"
BLUE="\\033[0;34m"
PURPLE="\\033[0;35m"
NC="\\033[0m"

headline() {
  echo ""
  echo "===> $1"
  echo ""
}

error() {
  echo -e "[${RED}ERROR${NC}] $1"
  FOUNDERROR="true"
}

info() {
  echo -e " [${BLUE}INFO${NC}] $1"
}

ok() {
  echo -e "   [${GREEN}OK${NC}] $1"
}

ask() {
  echo -en "    [${PURPLE}?${NC}] $1 "
}

space() {
  echo -e "        $1"
}

function echo_json() {
  echo "$1" | jq .
}

function api_curl() {
  local CURL_CONFIG="${USERCONFIGDIR}/curl_config.$$"
  local CURL_TMP="${USERCONFIGDIR}/curl_out.$$"

  # Prepare Files
  touch "${CURL_CONFIG}" "${CURL_TMP}"
  chmod 600 "${CURL_CONFIG}" "${CURL_TMP}"
  {
    echo "request = \"$1\""
    echo "url = \"${LONGBOAT_ENDPOINT}/${LONGBOAT_API}$2\""
    echo "output = \"${CURL_TMP}\""
    echo "write-out = \"%{http_code}\""
    echo "silent"
    echo "header = \"Authorization: Bearer ${LONGBOAT_TOKEN}\""
    echo "header = \"Accept: application/json\""
  }  > "${CURL_CONFIG}"

  # Create arguments for CURL request
  if [ $# -gt 2 ]; then
    for ARG in "${@:3}"; do
      if [ -n "${ARG}" ]; then
        echo "data-urlencode = \"${ARG}\"" >> "${CURL_CONFIG}"
      fi
    done
  fi

  # Make curl request
  CURL_CODE=$(curl --config "${CURL_CONFIG}")
  CURL_EXIT="$?"
  CURL_RESPONSE=$(cat "${CURL_TMP}")
  rm "${CURL_CONFIG}" "${CURL_TMP}"

  if [ ${CURL_EXIT} -gt 0 ]; then
    echo "ERROR! API request failed - curl error code ${CURL_EXIT}"
    echo "For more information https://curl.haxx.se/libcurl/c/libcurl-errors.html"
    exit 1
  fi

  if [ -z "${CURL_SILENT}" ]; then
    echo_json "${CURL_RESPONSE}"
  fi

  if [ -z "${CURL_CONTINUE}" ]; then
    if [ "${CURL_CODE}" != "200" ]; then
      exit 1
    fi
  fi
}

function api_curl_v2() {
  local CURL_CONFIG="${USERCONFIGDIR}/curl_config.$$"
  local CURL_TMP="${USERCONFIGDIR}/curl_out.$$"

  # Prepare Files
  touch "${CURL_CONFIG}" "${CURL_TMP}"
  chmod 600 "${CURL_CONFIG}" "${CURL_TMP}"
  {
    echo "request = \"$1\""
    echo "url = \"${LONGBOAT_ENDPOINT}/${LONGBOAT_API}$2\""
    echo "output = \"${CURL_TMP}\""
    echo "write-out = \"%{http_code}\""
    echo "silent"
    echo "header = \"Authorization: Bearer ${LONGBOAT_TOKEN}\""
    echo "header = \"Accept: application/json\""
  }  > "${CURL_CONFIG}"

  # Create arguments for CURL request
  if [ $# -gt 2 ]; then
    for ARG in "${@:3}"; do
      if [ -n "${ARG}" ]; then
        echo "data-urlencode = \"${ARG}\"" >> "${CURL_CONFIG}"
      fi
    done
  fi

  # Make curl request
  CURL_CODE=$(curl --config "${CURL_CONFIG}")
  CURL_EXIT="$?"
  CURL_RESPONSE=$(cat "${CURL_TMP}")
  rm "${CURL_CONFIG}" "${CURL_TMP}"

  # Check for curl exit code
  if [ "${CURL_EXIT}" -gt 0 ]; then
    if [ "${CURL_EXIT}" -eq 7 ]; then
      error "Failed to connect to API: ${URL}"
    else
      error "API curl request failed (curl error code ${CURL_EXIT})"
      space "For more information see https://curl.haxx.se/libcurl/c/libcurl-errors.html"
    fi
    return 255
  fi

  if [ "${CURL_CODE}" != "200" ]; then
    echo "${CURL_RESPONSE}" | jq --raw-output .errors[] | while read -r ERROR ; do
      error "${ERROR}"
    done
  fi

  if [ "${CURL_CODE}" == "200" ]; then
    return 0
  fi

  return 1
}

function confirm_continue() {
  read -r CONFIRM
  if [ "${CONFIRM}" != "y" ]; then
    echo "aborted."
    exit 1
  fi
}

function confirm_delete() {
  local METHOD="$1"
  local URL="$2"

  if [ "${LONGBOAT_DONTASK}" == "true" ]; then
    api_curl "${METHOD}" "${URL}"
  else
    echo -n "Confirm delete with 'y' (y/N): "
    read -r CONFIRM
    if [ "${CONFIRM}" != "y" ]; then
      echo "Delete aborted."
      exit 1
    else
      api_curl "${METHOD}" "${URL}"
    fi
  fi
}

function version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

function user_dir_perms() {
  chmod 700 "${USERCONFIGDIR}"
  chmod 600 "${USERCONFIG}"
}

function user_hosts_update() {
  CURL_SILENT=true

  user_dir_perms

  # Update hosts file
  api_curl GET /user/config/hosts
  echo "${CURL_RESPONSE}" > "${USERCONFIGDIR}/hosts"
  chmod 600 "${USERCONFIGDIR}/hosts"

  # Update known_hosts file
  api_curl GET /user/config/known
  echo "${CURL_RESPONSE}" > "${USERCONFIGDIR}/known_hosts"
  chmod 600 "${USERCONFIGDIR}/known_hosts"
}
